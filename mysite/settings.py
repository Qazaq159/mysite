"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 3.2.18.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kdvj1k45njn&()58)1*va^oirq$8ga(26^t6_lv04-=kh7javz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'polls.apps.PollsConfig',
    'mstools.apps.MstoolsConfig',
    'django_celery_beat',
    'rest_framework',
    'translated_fields',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# Force PostgreSQL when running tests; otherwise prefer PostgreSQL if env vars provided, fallback to SQLite.
if 'test' in sys.argv:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('MASTER_DB_NAME', 'postgres'),
            'USER': os.getenv('MASTER_DB_USER', 'postgres'),
            'PASSWORD': os.getenv('MASTER_DB_PASSWORD', 'postgres'),
            'HOST': os.getenv('MASTER_DB_HOST'),
            'PORT': os.getenv('MASTER_DB_PORT'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('MASTER_DB_NAME'),
            'USER': os.getenv('MASTER_DB_USER'),
            'PASSWORD': os.getenv('MASTER_DB_PASSWORD'),
            'HOST': os.getenv('MASTER_DB_HOST'),
            'PORT': os.getenv('MASTER_DB_PORT'),
        },
        'replica': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('REPLICA_DB_NAME'),
            'USER': os.getenv('REPLICA_DB_USER'),
            'PASSWORD': os.getenv('REPLICA_DB_PASSWORD'),
            'HOST': os.getenv('REPLICA_DB_HOST'),
            'PORT': os.getenv('REPLICA_DB_PORT', '5432'),
        }
    }

USE_REPLICA_DATABASE = os.getenv('USE_REPLICA_DATABASE', default='false').lower() == 'true'
DATABASE_ROUTERS = ['mysite.router.ReplicaRouter']


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en'

LANGUAGES = [
    ('en', 'English'),
    ('kk', 'Kazakh'),
    ('ru', 'Russian'),
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'

CELERY_QUEUE_ONE = 'one'
CELERY_QUEUE_TWO = 'two'
CELERY_QUEUE_THREE = 'three'

CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL')
CELERY_TASK_ROUTES = {
    'polls.periodic.task_one': CELERY_QUEUE_ONE,
    'polls.periodic.task_two': CELERY_QUEUE_ONE,
    'polls.periodic.task_three': CELERY_QUEUE_ONE,
    'polls.periodic.task_four': CELERY_QUEUE_ONE,
    'polls.periodic.task_five': CELERY_QUEUE_ONE,
    'polls.periodic.task_six': CELERY_QUEUE_ONE,
}

METRICS_LOGGER_NAME = 'mysite.metrics'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'json': {
            '()': 'mstools.json_formatters.SimpleJsonFormatter'
        },
    },

    'handlers': {
        'metrics_log_handler': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR.parent / 'logs' / 'metrics.log',
            'backupCount': 200,
            'maxBytes': 5 * 1024 * 1024,
            'formatter': 'json',
        }
    },

    'loggers': {
        METRICS_LOGGER_NAME: {
            'handlers': ['metrics_log_handler'],
            'level': 'INFO',
            'propagate': True,
        }
    }
}
